This is a fairly straightforward problem. We simply need to recognize that in order to make an array non-decreasing with a single modification, there can be at most one element that breaks the monotonicity. This means we can iterate through the array, and simply count the number of times monotonicity is broken. That is, how many times do we encounter an element that is lower than the previous element? If this count is greater than 1, we can return false right away. If the count is 1, we look at the immediate surroundings of the problem index p, at which arr[p] > arr[p+1].

If p = 0, then we could make the array good by setting A[p] = A[p+1].
If p = len(A) - 2, then we could make the array good by setting A[p+1] = A[p].
Otherwise, A[p-1], A[p], A[p+1], A[p+2] all exist, and:
We could change A[p] to be between A[p-1] and A[p+1] if possible, or
We could change A[p+1] to be between A[p] and A[p+2] if possible.

If none of these cases work, then we also return false.

Otherwise, return true.

def check(lst):
  count =
  0
  for i in range(len(lst) - 1):
    if lst[i] >
 ; lst[i + 1]:
      if count > 0:
        return False
      if (i - 1 >= 0 and i + 2 < len(lst) and 
        lst[i] > lst[i + 2] and 
        lst[i + 1] < lst[i - 1]):
        return False
      count += 1
  return True

print check([13, 4, 7])
# True

print
  check([5,1,3,2,5])
# False

The time complexity of this solution is O(N), as we are simply doing a single iteration of the array.
