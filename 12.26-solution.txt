This problem isn't terribly difficult, but there are a lot of ways to mess up this problem, which makes it fun to think about.

It's possible to use a combination of arrays, sets, and hashmaps here, and the challenge is picking the right data structure.

The brute force approach involves scanning nums2 for each item in nums1.

class Solution:
  def intersection(self, nums1, nums2):
    res = {}
    for num in nums1:
      if num in nums2 and num not in res:
        res[num] = 1
    return list(res.keys())


print Solution().intersection([4, 9, 5], [9, 4, 9, 8, 4])
# [9, 4]

However, this ends up running in time O(n * m), where n = size of nums1, and m = size of nums2.

Making clever use of hashmaps, we can get this to run in linear time by creating a hashmap and checking it in our iteration.

class Solution(object):
  def intersection(self, nums1, nums2):
    hash = {}
    duplicates = {}
    for i in nums1:
      hash[i] = 1
    for i in nums2:
      if i in hash:
        duplicates[i] = 1
    return duplicates.keys()


print Solution().intersection([4, 9, 5], [9, 4, 9, 8, 4])
# [9, 4]

This runs in linear time and linear space.

This is a good example to look at and be careful about using built-ins. Sure , it's easy to do a one-liner like :
set1 = set(nums1)
set2 = set(nums2)
return [x for x in set1 if x in set2]
But as you can see this is already using more space than necessary, and the time-space analysis becomes tricky to analyze (it is dependent on Python's implementation of these) due to the built-ins and lambda one-liner.
