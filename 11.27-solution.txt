If the array was restricted to only contain positive integers, the solution would be fairly trivial. Simply sort the array, and multiply the first 3 elements. However, this approach no longer works if there are negative numbers involved. To account for negative numbers, we require a slight modification. First, it is important to recognize that if we are going to include negative n number, we need to have 2 so that they cancel each other out. This means that the largest product is either the product of the 3 largest numbers, or the largest number and the 2 smallest numbers (most negative).

def maximum_product_of_three(lst):
  lst.sort()
  third_largest, second_largest, first_largest = lst[-3], lst[-2], lst[-1]
  first_smallest, second_smallest = lst[0], lst[1]
  return max(third_largest * second_largest * first_largest,
             first_largest * first_smallest * second_smallest)


print maximum_produ
 ct_of_three([-4, -4, 2, 8])

The time complexity of this solution is O(N log N) due to the sorting. However, there is a more optimal solution that has a linear time complexity of O(N). Following up from the above approach, we only really care about 5 numbers (the 3 largest, and the 2 smallest). We can find these 5 values in linear time using a single traversal of the array, and then simply figure out the combination that results in the largest product.

from math import inf

def maximum_product_of_three(lst):
  max1, max2, max3, min1, min2 = -inf, -inf, -inf, inf, inf
  for x in lst:
    if x > max1:
      max3 = max2
      max2 = max1
      max1 = x
    elif x > max2:
      max3 = max2
      max2 = x
    elif x > max3:
      max3 = x
    if x < min1:
      min2 = min1
      min1 = x
    elif x < min2:
      min2 = x
  return max(max1 * max2 * max3, max1 * min1 * min2)

print maximum_product_of_three([-4, -4, 2, 8])
# 128
