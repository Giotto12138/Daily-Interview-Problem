The naive solution to this problem is to use a nested for loop and consider all the possible buy and sell combinations. The outer loop is the buy price, and the inner loop is the end price. Simply track the maximum profit and return it at the end.

def buy_and_sell(arr):
  max_profit = 0
  for i in range(len(arr) - 1):
    for j in range(i, len(arr)):
      buy_price, sell_price = arr[i], arr[j]
      max_profit = max(max_profit, sell_price - buy_price)
  return max_profit

print buy_and_sell([9, 11, 8, 5, 7, 10])
# 5

However, this is quite slow as it has a time complexity of O(N^2), due to the double for-loops each iterating over N elements. There is a more optimal solution which runs in linear time.

If we iterate the array backwards, we can keep track of the highest price so far (this will be the best sell price for any element to its left). Then while iterating, we simply compute the profit by subtracting the current element (treat it as buy price) from the highest price to the right, and keep track of the maximum profit in a variable.

def buy_and_sell(arr):
  current_max, max_profit = 0, 0
  for price in reversed(ar
 r):
    current_max = max(current_max, price)
    potential_profit = current_max - price
    max_profit = max(max_profit, potential_profit)
  return max_profit

print buy_and_sell([9, 11, 8, 5, 7, 10])
# 5

This solution now has a time complexity of O(N) since we only require a single pass of the array. It has a space complexity of O(1) since we use constant space to keep track of the current_max when iterating.
