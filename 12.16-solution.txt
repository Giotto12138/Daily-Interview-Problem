The main idea is to iterate through every number in nums, using each one as a target to find two other numbers which make the total equal to 0. To find these other two numbers, we use two pointers, l and r. l goes from left to right, and r goes from right to left.
The first step is to sort the array in ascending order so that it is easier to adjust l and r accurately. Note that l always starts from nums[i+1] because the combination of nums[0] and nums[1] has already been tried.

We check several conditions at each iteration to ensure we have no duplicates and are adjusting l and r accurately.
1.) if the total is less than 0, we need it to be larger so we move the left pointer.
2.) if the total is greater than 0, we need it to be smaller, so we move the right pointer.
3.) If the total is 0, we have found a triplet.

The time complexity is O(N^2 + NlogN), because sorting takes O(NlogN) and as we iterate once through nums, in each step we iterate through the whole array. Since Big-O is asymptotic, the total time complexity is O(N^2). The space complexity is O(N), because the extra space we used is in results and in the worst case we may store all of nums in it.

class Solution(object):
  def threeSum(self, nums):
    results = []
    nums.sort()
    length = len(
 nums)
    # Range is length - 2 because we need at least
    # 3 numbers to continue
    for i in range(length - 2):
      # The sum of 3 positive numbers will always be > 0.
      if nums[i] > 0:
        break
      # If nums[i] == nums[i - 1], it's a duplicate
      # element and we don't need to check.
      if i > 0 and nums[i] == nums[i - 1]:
        continue
      l, r = i + 1, length - 1
      while l < r:
        total = nums[i] + nums[l] + nums[r]
        if total < 0:
          l += 1
        elif total > 0:
          r 
 -= 1
        else:
          results.append([nums[i], nums[l], nums[r]])
       
    while l < r and nums[l] == nums[l + 1]:
            l += 1
      
     while l < r and nums[r] == nums[r - 1]:
            r -= 1
     
      l += 1
          r -= 1
    return results


# Test Program
nums = [1, -2, 1, 0, 5]
print(Solution().threeSum(nums))
# [[-2, 1, 1]]
