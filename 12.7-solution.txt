The only approach to this problem is to actually calculate all terms starting from the first one. The general algorithm is to go through each character while keeping count of the consecutive numbers. If the number changes, then add to the new result string and reset count.

def look_and_say(num):
  result = '1'
  for i in range(1, num):
    new_result = ''
    chr = result[0]
    count = 0<
 /span>
    for c in result:
      if chr == c:
        count += 1
      else:
        new_result += str(count) + chr
        count = 1
        chr = c

    result = new_result + str(count) + chr

  return result

print look_and_say(5)
# 111221

The time-complexity of a recursive algorithm like this is tricky to calculate. But, we can see that the numbers are growing exponentially in length intuitively. To describe the prior number, we generally need more numbers to do so.

1
11
21
1211
111221
312211
13112221
1113213211
31131211131221
13211311123113112211
11131221133112132113212221
3113112221232112111312211312113211
1321132132111213122112311311222113111221131221
11
 131221131211131231121113112221121321132132211331222113112211

This indicates exponential time-complexity. In actuality (according to wikipedia), the precise value is that the length grows by Î» = 1.303577269034 each generation, indicating a time-complexity of O(1.3^n). You wouldn't need to calculate this constant of course, since that is beyond the scope, but it's nice to recognize that this would be exponential/space.
