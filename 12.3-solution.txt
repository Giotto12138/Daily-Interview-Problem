A recursive approach can be taken to generate the tree. We can take the middle of the list as the node value, and then recursively create another tree for every element left of the middle, and another tree for every element right of the middle. The two new trees can then be set as the left and right node of a new node we create with the middle list value as the node value. Since both sides of the list will differ by at most 1, their height will also only differ by at most 1, creating a balanced binary search tree.

from collections import deque

class Node:
  def __init__(self, value, left=None, right=None):
    self.value = value
    self.left = left
    self.right = right

  def __str__(self):
    # level-by-level pretty-printer
    no
 des = deque([self])
    answer = ''
    while len(nodes):
      node = nodes.popleft()
 
      if not node:
        continue
      answer += str(node.value)
      nodes.append(node.left)
      nodes.append(node.right)
    return answer


def createBalancedBST(nums):
  if not nums:
    return None

  mid = len(nums) // 2
  left = createBalancedBST(nums[:mid
 ])
  right = createBalancedBST(nums[mid + 1:])

  return Node(nums[mid], left, right)

print createBalancedBST([1, 2, 3, 4, 5, 6, 7])
# 4261357
#   4
#  / \
# 2   6
#/ \ / \
#1 3 5 7

The time complexity of this solution is O(n), since every element is iterated through.

The space complexity of this solution is O(n), since a new Node is created for every element.
