Solution 1:

Using a map to keep track of the count of each item, we can figure out which number appears once. This uses O(n) space.

def singleNumber(nums):
  occurance = {}
  
  for n in nums:
    occurance[n] = occurance.get(n, 0) + 1
  
  for key<
 span style="color: #000000; font-weight: bold">, value in occurance.items():
    if value == 1:
      return key

print singleNumber([4, 3, 2, 4, 1, 3, 2])
# 1

Solution 2:

A way to solve this with constant space is to use the XOR function. For each 1 bit that appears in the position, if XOR-ed with another number also with a bit in that position, it zeros out. So two of the same numbers XOR-ed would be equal to 0. Hence if only 1 number is not a duplicate, if we XOR all numbers in the list we are left with the number that has no duplicate.

def singleNumber(nums):
  unique = 0
  for n in nums:
    unique ^= n
  return unique

print singleNumber([4, 3, 2, 4, 1, 3, 2])
# 1
