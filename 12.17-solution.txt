A good initial solution to this problem is to write a method that determine whether or not a tree is a valid BST (recall this from an earlier problem). Then, we can simply traverse the binary tree, and use this method on all the nodes, and return the node corresponding to the largest tree.

class TreeNode:
  def __init__(self, key):
    self.left = None
    self.right = None
    self.key = key

  def __str__(self):
    # preorder traversal
    answer = str(self.key)
    if self.left:
      answer += str(s
 elf.left)
    if self.right:
      answer += str(self.right)
    return answer

d
 ef is_bst(root):
  def is_bst_helper(root, min_key, max_key):
    if root is None:
      return True
    if root.key <= min_key or root.key >= max_key:
      return False
    return is_bst_helper(root.left, min_key, root.key) and \
        is_bst_helper(root.right, root.key, max_key)

  return is_bst_helper(root, float('-inf'), float('inf'))

def size(root):
  if root is None:
    return 0
  return size(root.left) + size(root.right) + 1

def largest_bst_subtree(root):
  def helper(root):
    # Returns a tuple of (size, root) of the largest subtree.
 
    if is_bst(root):
      return (size(root), root)
    return max(helper(root
 .left), helper(root.right), key=lambda x: x[0])

  return helper(root)[1]


#     5
#    / \
#   6   7
#  /   / \
# 2   4   9
node = TreeNode(5)
node.left = TreeNode(6)
node.right = TreeNode(7)
node.left.
 left = TreeNode(2)
node.right.left = TreeNode(4)
node.right.right = TreeNode(9)
print largest_bst_subtree(node)
#749

However, this solution is quite inefficient. It has a time complexity of O(N^2) since for each node, we are doing an O(N) of the tree to determine if it is a valid BST.

To make this more efficient, we notice that for checking whether a given node is a root to a valid BST, we are checking w hether its left and right subtrees are valid BSTs. This is a lot of repeated computation! Instead of passing the min_key and max_key downward, we can pass it up the tree, and at the current node, simply check if the value is less than the max_key of its left child, and greater than the min_key of its right child. Then we simply track of the of the largest size while doing this bottom-up approach.

class TreeNode:
  def __init__(self, key):
    self.left = None
    self.right = None
    self.key = key

  def __str__(self):
    # preorder traversal
    answer = str(self.key)
    if self.left:
      answer += str(self.left)
    if self.right:
      answer += str(self.right)
    ret
 urn answer


class Solution(object):
  def largest_bst_subtree(self, root):
    self.max_size = 0
    self.max_root = None

    def helper(root):
      # Returns a tuple of (size, min_key, max_key) of the subtree.
      if root is None:
        return (0, float('inf'), float('-inf'))
      left = helper(root.left)
      right = helper(root.right)
      if root.key > left[2] and root.key < right[1]:
        size = left[0] + right[0] + 1
 
        if size > self.max_size:
          self.max_size = size
          self.max_root = root
        return (size, min(root.key, left[1]), max(root.key, right[2]))
      else:
        return (0, float('-inf'), float('inf'))

    helper(root)
    return self.max_root


#     5
#    / \
#   6   7
#  /   / \
# 2   4   9
node = TreeNode(5)
node.left = TreeNode(6)
node.right = TreeNode(7)
node.left.left = TreeNode(2)
node.right.left = TreeNode(4)
node.right.right = TreeNode(9)
print Solution().largest_bst_subtree(node)
# 749

This reduces the time complexity to O(N) since the algorithm now only visits each node in the tree once.
