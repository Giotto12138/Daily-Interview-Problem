The brute force solution to this problem is to simply generate all the possible subsequences and for each one, check that if it is increasing. Keep track of the length of the longest subsequence that is increasing. However, this approach is very expensive. Generating all the possible subsequences has a time complexity of O(2^N) because at each position n you can either include it or not (two choices) yielding (2 * 2 * 2 * 2 * 2 ... = 2^n).

A more efficient approach is to use dynamic programming. However, to arrive at the optimal solution, let's start with just recursion. If we think about the problem in a recursive manner, we can break it down as such:

1. Any empty list should return 0.
2. A list with just one element should return 1.
3. For all the elements to its left that the current element is greater than, the longest increasing subsequence ending at the current element is 1 + the long est increasing subsequence ending at an index to its left. We simply need to keep track of the largest result.

def longest_increasing_subsequence(arr):
  if not arr:
    return 0
  if len(arr) == 1:
    return 1

  max_ending_here = 0
  for i in range(len(arr)):
    ending_at_i = longest_increasing_subsequence(arr[:i])
    if arr[-1] > arr[i - 1] and ending_at_i + 1 > max_ending_here:
      max_ending_here = ending_at_i + 1
  return max_ending_here


print longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])
# 6

This has an exponential time complexity due to the repeated computations. To optimize it we can use dynamic programming and use a 1D cache of length N. Each index in this cache stores the length of the longest increasing subsequence ending at the index. At the end, we simply return the largest value in this cache.

def longest_increasing_subsequence(arr):
  if not arr:
    return 0
  cache = [1] * len(arr)
  for i in range(1, len(arr)):
    for j in range(i):
      if arr[i] > arr[j]:
        cache[i] = max(cache[i], cache[j] + 1)
  return max(cache)


print longest_increasing_subsequence([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])
# 6
