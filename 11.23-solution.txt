This is a classic question related to topological sorting. To come up with the algorithm, you can think about how you would intuitively do it if you were to do it manually.

The idea is to first determine all the courses without any prerequisites, and put them in the "take-able" list. Then for each of these courses, find all courses that have it as a pre-requisite, and remove it from the pre-requisite list. Repeat this process, and if at any iteration, there are remaining courses but they all have pre-requisites left, it means there is a circular dependancy, and we return NULL.

def courses_to_take(course
 _to_prereqs):
  # Build a map of maps "course => preqreuisites" for better efficiency.
  course_to_prereqs = {c: set(p) for c, p in course_to_prereqs.items()}

  # Used to find courses D which have C as a prerequiste
  prereq_to_course = {}
  for course in course_to_prereqs:
    for prereq in course_to_prereqs[
 course]:
      if prereq not in prereq_to_course:
        prereq_to_course[prereq] = []
      prereq_to_course[prereq].append(course)

  result = [] # courses we need to take in order
  todo = [c for c, p in course_t
 o_prereqs.items() if not p]
  while todo:
    prereq = todo.pop()
    result.append(prereq)

    # Find which courses are now free to take
    for c in prereq_to_course.get(prereq, []):
      course_to_prereqs[c].remove(prereq)
      if not course_to_prereqs[c]:
        todo.append(c)

  # Circular dependency
  if len(result) < len(course_to_prereqs):
    return None
  return result

courses = {
  'CSC300': ['CSC100', 'CSC200'], 
  'CSC200': ['CSC100'], 
  'CSC100': []
}
print courses_to_take(courses)
# ['CSC100', 'CSC200', 'CSC300']

The time complexity is linear O(n). This may seem like a complicated algorithm, but if you think about it, we are simply doing a number of passes on the input course-list. The first two passes build some maps for more efficient processing. There is then the while loop, which processes each course item just once.

The space complexity is linear as well, for the maps that we're creating.
