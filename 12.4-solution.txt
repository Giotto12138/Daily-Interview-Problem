A key observation for solving this problem is that for any given index, the amount of water that can accumulate there is the smaller of the highest value to its left and the highest value to its right, minus the height at that index. Knowing this, we can implement a straight forward solution where we first iterate the array from left to right, and create an array that holds the maximum value to the left for each index. Then, we iterate the original array from right to left, and create another array that holds the maximum value to the right of each index. Finally, we simply iterate the original array, and subtract the value at the current index from the smaller of the values in that index in the two arrays we constructed to determine how much water accumulates at that index.

def capacity(arr):
  n = len(arr)
  left_maxes = [0 for _ in range(n)]
  right_maxes = [0 for _ in range(n)]

  current_left_max = 0
  for i in range(n):
    current_left_max = max(current_left_max, arr[i])
    left_maxes[i] 
 = current_left_max

  current_right_max = 0
  for i in range(n - 1, -1, -1):
    current_right_max = max(current_right_max, arr[i])
    right_maxes[i] = current_right_max

  total =
  0
  for i in range(n):
    total += min(left_maxes[i], right_maxes[i]) - arr[i]
  return total

print capacity([0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1])
# 6
< BR>The time complexity of this solution is O(N) since we are simply doing 3 linear passes. Space complexity is O(N) for holding the max values.
