Recall that preorder traversal is root-left-right, and inorder traversal is left-root-right. This means that the first element of the preorder traversal should be the root of our tree. And in the inorder traversal, everything to the left of this element is its left subtree, and everything to the right is its right subtree. Using these key pieces of information, we can come up with a recursive algorithm to reconstruct the tree:

1. First, look at the first element of the preorder traversal to determine the root
2. Find that element in the inorder traversal to determine the left and right subtrees
3. Recursively reconstruct the left and right subtrees and then join to the root

from collectio
 ns import deque


class Node(object):
  def __init__(self, val):
    self.val = val
    self.left = None
    self.right = None

  def __str__(self):
    q = deque()
    q.append(self)
    result = ''
    while len(q):
      n = q.popleft()
      result += n.val
      if n.left:
        q.append(n.left)
      if n.right:
        q.append(n.right)

    return result


def reconstruct(preorder, inorder):
  if not preorder and not inorder:
    return None
  if len(preorder) == len(inorder) == 1:
    return Node(preorder[0])

  root = Node(preorder[0])
  rootIndex = inorder.index(root.val)
  root.left = reconstruct(preorder[1:1 + rootIndex], inorder[0:rootIndex])
  root.right = reconstruct(preorder[1 + rootIndex:], inorder[rootIndex + 1:])
  return root


tree = reconstruct(['a', 'b', 'd', 'e', 'c', 'f', 'g'],
                   ['d', 'b', 'e', 'a', 'f', 'c', 'g'])
print tree
# abcdefg

The time-complexity is O(n^2) because for each node in the preorder list, we search for the node in the inorder list. (Pre-building a hashmap here could reduce that to O(n)). Space-complexity is linear because the recursion depth reaches a maximum depth equal to the number of nodes.
