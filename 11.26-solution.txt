There are many approaches that one can take to solve this problem. This solution discusses one possible approach. We simply start from the top-left, and start traversing the array to the left, while keeping track of our current direction. Once we visit any element, we set it to None to indicate that it has been visited. Then, if we ever reach the edge of the array, or a None, we change direction to the appropriate next direction in a counter clockwise traversal.

Most of this is careful coding of directions.

UP = 0
RIGHT = 1
DOWN = 2
LEFT = 3

def next_direction(direction):
  return {
      RIGHT: DOWN,
      DOWN: LEFT,
      LEFT: UP,
      UP: RIGHT
  }[direction]

def next_position(position, direction):
  if direction == RIGHT:
    return (position[0], position[1] + 1)
  elif direction == DOWN:
    return (position[0] + 1, position[1])
  elif direction == LEFT:
    return (position[0], position[1] - 1)
  elif direction == UP:
    return (position[0] - 1, position[1])

def should_change_direction(M, r, c):
  in_bounds_r = 0 <= r < len(M)
  in_bounds_c = 0 <= c < len(M[0])
  return (not in_bounds_r or
          not in_bounds_c or
          M[r][c] is None)

def matrix_spiral_print(M):
  remaining = len(M) * len(M[0])
  current_direction = RIGHT
  current_position = (0, 0)
  while remaining > 0:
    r, c = current_position
    print M[r][c], 
    M[r][c] = None
    remaining -= 1

    possible_next_position = next_position(current_position, current_direction)
    if should_change_direction(M, possible_next_position[0], possible_next_position[1]):
      current_direction = next_direction(current_direction)
      current_position = next_position(current_position, current_direction)
    else:
      current_position = possible_next_position



 grid = [[1,  2,  3,  4,  5],
        [6,  7,  8,  9,  10],
        [11, 12, 13, 14, 15],
        [16, 17, 18, 19, 20]]

matrix_spiral_print(grid)
# 1 2 3 4 5 10 15 20 19 18 17 16 11 6 7 8 9 14 13 12

This solution has a time complexity of O(N*M), since we are simply iterating through all the elements in the 2D array once.
