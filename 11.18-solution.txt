The naive solution is to iterate through list one, and add each node (value) to a set. Then, iterate the second linked list, and return the first node that already exists in the set. This has a linear time complexity of O(M+N) since we need to iterate both linked lists. However, the space complexity is also linear with the size of the bigger list, O(max(M, N)). This is because we store the first list we iterate in a set, and it may be the bigger list.

While it is obvious that we cannot improve the time complexity of the solution (in the worst case, we always need to fully iterate both lists), we can improve the space complexity. The optimal solution uses a two pointers approach. First, we determine the difference in the lengths of the 2 lists and then place one pointer at the head of the smaller list, and the second pointer as the kth no de of the larger list, where k is the difference in size. Then, simply move both pointers ahead together, and find the first node where the values match.

def length(head):
  if not head:
    return 0
  return 1 + length(head.next)

def intersection(a, b):
  m, n = length(a), length(b)
  cur_a, cur_b = a, b

  if m > n:
    for _ in range(m - n):
      cur_a = cur_a.next
  else:
    for _ in range(n - m):
      cur_b = cur_b.next

  while cur_a != cur_b:
    cur_a = cur_a.next
    cur_b = cur_b.next
  return cur_a

class Node(object):
  def __init__(self, val):
    self.val = val
    self.next = None
  def prettyPrint(self):
    c = self
    while c:
      print c.val,
      c = c.next

a = Node(1)
a.next = Node(2)
a.next.next = Node(3)
a.next.next.next = Node(4)

b = Node(6)
b.next = a.next.next

c = intersection(a, b)
c.prettyPrint()
# 3 4
